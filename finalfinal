#-*- coding: utf-8 -*-
#PARTE REGEX SACA LA FRASES DEL TEXTO
import inspect
import re

def traduccion(tex):
    
    tex = tex.replace(",","")
    #lista de palabras de cada categoria.

    vi = ["camina","bebe","durará","corre","rige","duerme","nada","sonrie", "vive", "baila", "come","canta","estornuda","fracasa","grita","llora","patina","pelea","respira","trabaja"]
    vt = ["desempeñar","emitir","figurará","cumplirá","somete","pagar","proporcionará","modificar","avisar","asume","aceptó","ama","presiona","responsabiliza","invita","firma","ingresó","alterar","lee","paga", "compromete", "estudia", "escribe","quiere","alimenta","asusta","dice","engaña", "evita", "llama","mira","olvida","necesita","molesta","perdona","visita", "viaja"]
    np = ["labores","boleta","títulos","ventas","montos","jornada","obligación","campo","insumos","actor","clausulas","Contrato","instrucciones","cocacola", "carulla","pedro","trabajador","empleador","maria", "juan", "javier","abel", "mario","valerie", "jose", "angela", "natalia", "rupaul", "carlos", "fernando", "alejandro", "miguel","esteban", "gabriela","oscar","samuel","victor","edgar", "carlos","eduardo", "sergio", "nicolas", "nathalia","camilo","sebastian","isabella","luisa","sara","rodrigo","angel", "daniel", "manuel","andres","felipe","david", "kevin","cristhian","edwin", "julian", "maría", "josé", "juana", "bart", "lisa"]
    viind = ["caminar","beber","durar","correr","regir","dormir","nadar","sonreir", "vivir", "bailar", "comer","cantar","estornudar","fracasar","gritar","llorar","patinar","pelear","respirar","trabajar"]
    vtind = ["desempeñar","emitir","figurar","cumplir","someter","pagar","proporcionar","modificar","avisar","asumir","aceptar","amar","presionar","responzabilizar","invitar","firmar","ingresar","alterar","leer","pagar", "comprometer", "estudiar", "escribir","querer","alimentar","asustar","decir","engañar", "evitar", "llamar","mirar","olvidar","necesitar","molestar","perdonar","visitar", "viajar"]
    
    #pide al usuario una frase y la pasa a minusculas y las divide en una lista.
    words = tex.split(' ')
    
    # Elimina la preposicion "a"
    #print(words)
    # crear una lista de categorias con base en word2
    categorias = []
    words2 = []
    for w in words:
        if w in np:
            categorias.append('np')
            words2.append(w)
        if w in vi:
            categorias.append('vi')
            wii = vi.index(w) 
            words2.append(viind[wii])
        elif w in vt:
            categorias.append('vt')
            wti = vt.index(w) 
            words2.append(vtind[wti])
    if len(words2) == 1:
        return 0
    #for i in words2:
    #    print (i)
    # Decir que la frase no sirve si hay palabras por fuera del rango
    
    
        # crear un diccionario de categorias, dónde a cada categoria se le
        # asigna su debida expresión lógica.
    traducciones = []
    for i in range(len(words2)):
        if categorias[i] == 'np':
            ini = words2[i]
            traducciones.append(lambda X, ini = ini: X(ini))
        elif categorias[i] == 'np':
            inicial = words2[i].lower()
            traducciones.append(lambda X, inicial=inicial: X(inicial))
        elif categorias[i] == 'vi':
            infini = words2[i]
            traducciones.append(lambda x, infini=infini: str(infini) + "(" + str(x) + ")")
        elif categorias[i] == 'vt':
            infini = words2[i]
            traducciones.append(\
            lambda XX:(lambda x:(XX(lambda y, infini=infini: (str(infini) + "(" + str(x) + "," + str(y) + ")")))))
            
        # Operar con las palabras de derecha a izquierda, aplicando la función lambda
        # para integrar una expresión en otra
    n = len(traducciones)
    formula = traducciones[n-1]
    for i in range(0, n-1):
        j = (n - 2) - i
        formula = traducciones[j](formula)
            
            
    return(formula)
 

texto1 = open("contrato.txt", "r")
texto = ""
for line in texto1:
    texto += line


patron_sujeto = re.compile(r"[Ee]mpleador")
patron_puntos = re.compile(r"[\.|\,]")

matches_sujeto = patron_sujeto.finditer(texto)

indices_puntos = re.finditer("\.",texto)

lista_indices_puntos = []
for punto in indices_puntos:
    #print(punto.span(), punto.group())
    #print ("El indice del punto es: {0}".format(punto.start(0)))
    lista_indices_puntos.append(punto.start(0))

indices_sujeto = []
for match in re.finditer(r"([Ee]mpleador|Contrato|actor)(\s)",texto):
    #print(match.span(), match.group())
    indices_sujeto.append(match.span())

indice_inicial_sujeto = []
for i in indices_sujeto:
    indice_inicial_sujeto.append(i[0])
            
lista_g = []
#print(indice_inicial_sujeto)
#print("="*100)

for i in indice_inicial_sujeto:
    for a in lista_indices_puntos:
        if i < a:
            lista_g.append((i,a))
            break
         
#print("####"*10)
#print(lista_g)   
         
#for i in lista_g:
#    print(texto[i[0]:i[1]])

#print("="*100)
for line in texto1:
    texto += line


patron_sujeto = re.compile(r"[Tt]rabajador")
patron_puntos = re.compile(r"[\.|\,]")

matches_sujeto = patron_sujeto.finditer(texto)

indices_puntos = re.finditer("\.",texto)

lista_indices_puntos = []
for punto in indices_puntos:
    #print ("El indice del punto es: {0}".format(punto.start(0)))
    lista_indices_puntos.append(punto.start(0))

indices_sujeto = []
for match in re.finditer(r"[Tt]rabajador(\s)",texto):
    #print(match.span(), match.group())
    indices_sujeto.append(match.span())

indice_inicial_sujeto = []
for i in indices_sujeto:
    indice_inicial_sujeto.append(i[0])
            
lista_f = []

for i in indice_inicial_sujeto:
    for a in lista_indices_puntos:
        if i < a:
            lista_f.append((i,a))
            break

frases = []
for i in lista_g:
    m = texto[i[0]:i[1]]
    frases.append(m)  
         
for i in lista_f:
    m = texto[i[0]:i[1]]
    frases.append(m) 
frases2 = []
count = 1
for i in frases:
    m = traduccion(i)
    if m != 0:
        frases2.append(i)
        print("{0} : {1} ".format(count,m))
        count += 1    
           
indice = 1
count2 = 1 
print("Escoge el número del fragmento que quieres ver y si ya no quieres ver mas coloca 0 :) ")

while indice != 0:
    indice = int(input("¿Que fragmento quieres ver? : "))
    if indice > 0 and indice <= len(frases):
        print("{0} : {1}".format(indice,frases2[indice-1]))
    elif indice == 0:
        print("Proceso terminado :3")
        break
    else:
        print("No tengo más fragmentos :( , escoge uno de los que estan o termina el proceso con cero")
            
            
